options{
  STATIC = false;
}
PARSER_BEGIN(Parser)

package ru.pokrov.calc.parser;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class Parser{

    public static InputStream toStream(String input) {
        return new ByteArrayInputStream(input.getBytes(StandardCharsets.UTF_8));
    }

    public static Double Parce(String input) throws ParseException {
        InputStream stream = toStream(input);
        Parser parser = new Parser(stream);
        return parser.Start();
    }

    public static Token getTokenAt(String input, int pos) {
        InputStream stream = toStream(input);
        Parser parser = new Parser(stream);
        Token t;

        do {
            t = parser.getNextToken();
            if (t.beginColumn <= pos && pos <= t.endColumn)
                break;
        } while (t != null);

        return t;
    }

}
PARSER_END(Parser)

SKIP:{
  " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN : { < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "."<DIGITS> > }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

TOKEN:{
    < ADD: "+" >
  | < SUB: "-" >
  | < MUL: "*" >
  | < DIV: "/" >
  | < POW: "^" >
  | < LBR: "(" >
  | < RBR: ")" >
}

<*> TOKEN : { <UNKNOWN: (~[])> }

public double Start() throws NumberFormatException :
{
    double result;
}
{
    result = Priority1()
    <EOF>
    {
        return result;
    }
}

/**
 * Priority1 -> Priority2 ( + Priority2
 *                        | - Priority2
 *                        )
 */
private double Priority1() throws NumberFormatException :
{
    double i ;
    double value ;
}
{
    value = Priority2()
    (
        <ADD>
        i = Priority2()
        { value += i ; }
        |
        <SUB>
        i = Priority2()
        { value -= i ; }
    )*
    { return value ; }
}

/**
 * Priority2 -> Primary ( * Primary
 *                 | / Primary
 *                 )
 */
double Priority2() throws NumberFormatException :
{
    double i ;
    double value ;
}
{
    value = Priority3()
    (
        <MUL>
        i = Priority3()
        { value *= i ; }
        |
        <DIV>
        i = Priority3()
        { value /= i ; }
    )*
    { return value ; }
}

double Priority3() throws NumberFormatException, IllegalArgumentException :
{
    double i ;
    double value ;
}
{
    value = Primary()
    (
        <POW>
        i = Primary()
        {
            if (value < 0) throw new IllegalArgumentException("pow < 0");
            value = Math.pow(value, i);
        }
    )*
    { return value ; }
}


/**
 * Primary ->  number
 *            | ( Priority1 )
 *            | - Primary
 */
private double Primary() throws NumberFormatException :
{
    Token t ;
    double d;
}
{
    t = <NUMBER>
    { return Double.parseDouble( t.image ) ; }
    |
    <LBR> d=Priority1() <RBR>
    { return d ; }
    |
    <SUB> d=Primary()
    { return -d ; }
}
