options{
  STATIC = false;
}
PARSER_BEGIN(Parser)

package ru.pokrov.calc.parser;

public class Parser{

    public Token getLastToken() {
        Token t = this.getNextToken();
        Token prev = t;

        while (t.kind != ParserConstants.EOF) {
            prev = t;
            t = this.getNextToken();
        }

        return prev;
    }

}
PARSER_END(Parser)

SKIP:{
  " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN : { < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "."<DIGITS> > }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

TOKEN:{
    < ADD: "+" >
  | < SUB: "-" >
  | < MUL: "*" >
  | < DIV: "/" >
  | < LBR: "(" >
  | < RBR: ")" >
}

public double Parce() throws NumberFormatException :
{
    double result;
}
{
    result = Expression()
    <EOF>
    {
        return result;
    }
}

/**
 * Expression -> Term ( + Term
 *                    | - Term
 *                    )
 */
private double Expression() throws NumberFormatException :
{
    double i ;
    double value ;
}
{
    value = Term()
    (
        <ADD>
        i = Term()
        { value += i ; }
        |
        <SUB>
        i = Term()
        { value -= i ; }
    )*
    { return value ; }
}

/**
 * Term -> Primary ( * Primary
 *                 | / Primary
 *                 )
 */
double Term() throws NumberFormatException :
{
    double i ;
    double value ;
}
{
    value = Primary()
    (
        <MUL>
        i = Primary()
        { value *= i ; }
        |
        <DIV>
        i = Primary()
        { value /= i ; }
    )*
    { return value ; }
}

/**
 * Primary ->  number
 *            | ( Expression )
 *            | - Primary
 */
private double Primary() throws NumberFormatException :
{
    Token t ;
    double d;
}
{
    t = <NUMBER>
    { return Double.parseDouble( t.image ) ; }
    |
    <LBR> d=Expression() <RBR>
    { return d ; }
    |
    <SUB> d=Primary()
    { return -d ; }
}
