options{
  STATIC = false;
}
PARSER_BEGIN(Parser)

package ru.pokrov.calc.parser;
public class Parser{}

PARSER_END(Parser)

SKIP:{
  " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN : { < NUMBER : <DIGITS> | <DIGITS> "." <DIGITS> | <DIGITS> "." | "."<DIGITS> > }
TOKEN : { < #DIGITS : (["0"-"9"])+ > }

TOKEN:{
    < ADD: "+" >
  | < SUB: "-" >
  | < MUL: "*" >
  | < DIV: "/" >
  | < LBR: "(" >
  | < RBR: ")" >
}

public double Parce() throws NumberFormatException :
{
    double result;
}
{
    result = Expression()
    <EOF>
    {
        return result;
    }
}

private double Expression() throws NumberFormatException :
{
    double i ;
    double value ;
}
{
    value = Primary()
    (
        <ADD>
        i = Primary()
        { value += i ; }
        |
        <SUB>
        i = Primary()
        { value -= i ; }
    )*
    { return value ; }
}

private double Primary() throws NumberFormatException :
{
    Token t ;
}
{
    t = <NUMBER>
    { return Double.parseDouble( t.image ) ; }
}